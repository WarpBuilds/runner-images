on:
  push:
    branches:
      - feat/macos-tart
  workflow_dispatch:
    inputs:
      image:
        description: "Image name"
        required: true
        options:
          - "macos-13-arm64"
      tag:
        description: "Image tag"
        required: true
        default: "v0.5.0"

jobs:
  macos-13-arm64:
    # if: github.event.inputs.image == 'macos-13-arm64'
    runs-on: warp-ubuntu-latest-x64-2x
    env:
      XCODE_INSTALL_STORAGE_URL: ${{ secrets.MACOS_XCODE_INSTALL_STORAGE_URL }}
      PREPROD_AWS_ACCESS_KEY_ID: ${{ secrets.PREPROD_AWS_ACCESS_KEY_ID }}
      PREPROD_AWS_SECRET_ACCESS_KEY: ${{ secrets.PREPROD_AWS_SECRET_ACCESS_KEY }}
      PREPROD_AWS_REGION: us-east-2
      PROD_AWS_ACCESS_KEY_ID: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
      PROD_AWS_SECRET_ACCESS_KEY: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
      PROD_AWS_REGION: us-east-2
    steps:
      - uses: actions/checkout@v2
      - name: Set GITHUB_API_PAT
        run: |
          echo "GITHUB_API_PAT=$GITHUB_TOKEN" >> $GITHUB_ENV
      - name: Figure out image tag
        run: |
          IMAGE_TAG=${{ github.event.inputs.tag }}
          if [ "$IMAGE_TAG" == "" ]; then
            IMAGE_TAG=v0.5.0
          fi
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
      - name: Add preprod image URI on workflow dispatch
        run: |
          echo "PREPROD_IMAGE_URI=170982004044.dkr.ecr.us-east-2.amazonaws.com/warpbuild/runners:$IMAGE_TAG-macos-13-arm64-gh-warp" >> $GITHUB_ENV
      - name: Add prod image URI on workflow dispatch
        run: |
          echo "PROD_IMAGE_URI=459740431552.dkr.ecr.us-east-2.amazonaws.com/warpbuild/runners:$IMAGE_TAG-macos-13-arm64-gh-warp" >> $GITHUB_ENV
      - name: Add key to known_hosts
        env:
          MACOS_KEY: |
            ${{ secrets.MACOS_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$MACOS_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H '${{ secrets.MACOS_HOST }}' >> ~/.ssh/known_hosts
      - name: Validate that inputs are present
        run: |
          if [ -z "${{ secrets.MACOS_USERNAME }}" ]; then
            echo "MACOS_USERNAME is not set"
            exit 1
          fi
          if [ -z "${{ secrets.MACOS_HOST }}" ]; then
            echo "MACOS_HOST is not set"
            exit 1
          fi
          if [ -z "${{ secrets.MACOS_KEY }}" ]; then
            echo "MACOS_KEY is not set"
            exit 1
          fi

      - name: Just hello world from remote
        run: |
          ssh ${{ secrets.MACOS_USERNAME }}@${{ secrets.MACOS_HOST }} 'echo "Hello world from remote"'
      - name: Save script to a file
        run: |
          cat <<EOF > wb-mac-image-build.sh
          #!/bin/bash
          set -e

          # configure git with the github token
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"

          git config --global credential.helper store
          echo "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com" > ~/.git-credentials

          git clone https://github.com/${{ github.owner }}/${{ github.repository }} repo
          cd repo
          echo "Fetching all branches"
          git fetch --all
          git checkout origin/${{ github.ref }}

          cd images/macos
          make ci-pre-wb
          make ci-wb
          make ci-post-wb
          EOF
      - name: Run script on remote
        run: |
          cat wb-mac-image-build.sh
          scp -o StrictHostKeyChecking=no wb-mac-image-build.sh ${{ secrets.MACOS_USERNAME }}@${{ secrets.MACOS_HOST }}:~/wb-mac-image-build.sh
          ssh ${{ secrets.MACOS_USERNAME }}@${{ secrets.MACOS_HOST }} 'chmod +x ~/wb-mac-image-build.sh'
          ssh ${{ secrets.MACOS_USERNAME }}@${{ secrets.MACOS_HOST }} '~/wb-mac-image-build.sh'

      #     if [ ! -d "runner-images" ]; then
      #       # clone using the github token
      #       git clone
      #       https://$G

      # # - name: Enable ssh-rsa on system
      # #   run: |
      # #     # sudo bash -c 'echo "CASignatureAlgorithms +ssh-rsa" >> /etc/ssh/ssh_config'
      # #     echo "CASignatureAlgorithms +ssh-rsa" >> ~/.ssh/config
      # # - name: SSH into the macos machine and run the image build process
      # #   uses: appleboy/ssh-action@v1.0.3
      # #   with:
      # #     host: ${{ secrets.MACOS_HOST }}
      # #     username: ${{ secrets.MACOS_USERNAME }}
      # #     key: ${{ secrets.MACOS_KEY }}
      # #     allEnvs: true
      # #     script: |
      # #       if [ ! -d "runner-images" ]; then
      # #         # clone using the github token
      # #         git clone https://$GITHUB_TOKEN@github.com/${{ github.owner }}/${{ github.repository }}
      # #       fi
      # #       cd ${{ github.repository }}
      # #       git checkout ${{ github.ref }}
      # #       cd images/macos
      # #       make ci-pre-wb
      # #       make ci-wb
      # #       make ci-post-wb
